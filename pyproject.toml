[project]
name = "boalaas"
version = "0.1.0"
authors = [{ name = "David Joy", email = "joydh1@ornl.gov" }]
description = "Bayesian Optimization and Active Learning as a Service (BOALaaS): An INTERSECT service that provides Gaussian Process-based optimization and active learning"
readme = "README.md"
requires-python = ">=3.10"
keywords = ["active learning"]
#license = {text = "BSD-3-Clause"}
classifiers = ["Programming Language :: Python :: 3"]
# TODO move some dependencies into optional dependencies
dependencies = [
    "intersect_sdk[amqp]>=0.8.0,<0.9.0",
    "matplotlib>=3.8.2,<4.0.0",          # TODO - this is only required if using gpax or running the client, consider making an optional dependency group
    "numpy>=1.26.3,<2.0.0",
    "scikit-learn>=1.4.0,<2.0.0",        # TODO consider making an optional dependency group
    "scipy>=1.12.0,<2.0.0",
    "gpax>=0.1.8",                       # TODO consider making an optional dependency group
]

[tool.pdm.dev-dependencies]
lint = ["pre-commit>=3.3.1", "ruff==0.5.7", "mypy>=1.10.0"]
test = ["pytest>=7.3.2", "pytest-cov>=4.1.0", "httpretty>=1.1.4"]

[tool.ruff]
line-length = 100
format = { quote-style = 'single' }
namespace-packages = ["scripts/", "tests/"]

[tool.ruff.lint]
isort = { known-first-party = ['src'] }
pydocstyle = { convention = 'google' }
flake8-quotes = { inline-quotes = 'single', multiline-quotes = 'double' }
mccabe = { max-complexity = 20 }
# pyflakes and the relevant pycodestyle rules are already configured
extend-select = [
    'C90', # mccabe complexity
    'I',   # isort
    'N',   # pep8-naming
    #'D',     # pydocstyle           - disabled for now
    'UP',  # pyupgrade
    'YTT', # flake8-2020
    #'ANN',   # flake8-annotations   - disabled for now
    'ASYNC', # flake8-async
    'S',     # flake8-bandit
    'BLE',   # flake8-blind-except
    'B',     # flake8-bugbear
    'A',     # flake8-builtins
    'COM',   # flake8-commas
    'C4',    # flake8-comprehensions
    'DTZ',   # flake8-datetimez
    'T10',   # flake8-debugger
    'EM',    # flake8-error-message
    'FA',    # flake8-future-annotations
    'ISC',   # flake8-implicit-string-concat
    'ICN',   # flake8-import-conventions
    'G',     # flake8-logging-format
    'INP',   # flake8-no-pep420
    'PIE',   # flake8-PIE
    'T20',   # flake8-T20
    'PYI',   # flake8-pyi
    'PT',    # flake8-pytest-style
    'Q',     # flake8-quotes
    'RSE',   # flake8-raise
    'RET',   # flake8-return
    'SLF',   # flake8-self
    'SLOT',  # flake8-slots
    'SIM',   # flake8-simplify
    'TCH',   # flake8-type-checking
    'ARG',   # flake8-unused-arguments
    'PTH',   # flake8-use-pathlib
    'PGH',   # pygrep-hooks
    'PL',    # pylint
    'TRY',   # tryceratops
    'FLY',   # flynt
    'RUF',   # RUFF additional rules
]
# If you're seeking to disable a rule, first consider whether the rule is overbearing, or if it should only be turned off for your usecase.
ignore = [
    'COM812',  # formatter, handled by Ruff format
    'ISC001',  # formatter, handled by Ruff format
    'SIM105',  # "with contextlib.suppress():" is slower than try-except-pass
    'ANN101',  # don't need to annotate "self" typing
    'ANN102',  # don't need to annotate "cls" typing for class methods
    'ANN401',  # allow explicit "Any" typing, use with care
    'PLR2004', # allow "magic numbers"
    # TODO - should not ignore below in long term, but will for now
    'D100',
    'D101',
    'D103',
    'N802',
    'N803',
    'N806',
    'N812',
]

[tool.ruff.lint.extend-per-file-ignores]
'__init__.py' = ['F401'] # __init__.py commonly has unused imports
'docs/*' = [
    'D',      # the documentation folder does not need documentation
    'INP001', # docs are not a namespace package
]
'examples/*' = [
    'N999',   # module names for examples are not standard
    'T20',    # allow print/pprint statements in examples
    'S106',   # don't care about credentials in examples
    'D100',   # documenting modules in examples is unhelpful
    'D104',   # documenting packages in examples is unhelpful
    'TRY002', # examples can raise their own exception
    'FA100',  # examples are tested on Python 3.8, and future annotations cause problems with Pydantic
]
'scripts/*' = [
    'T20', # allow print/pprint statements in scripts
]
'tests/*' = [
    'S101',   # allow assert statements in tests
    'S106',   # don't care about credentials in tests
    'S311',   # don't care about cryptographic security in tests
    'SLF001', # allow private member access in tests
    'ANN',    # tests in general don't need types, unless they are runtime types.
    'ARG',    # allow unused parameters in tests
    'D',      # ignore documentation in tests
    'FA100',  # tests frequently use runtime typing annotations
]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

#[tool.setuptools]
#package-dir = {"" = "src"}

